# Snippets for Go

priority 0

# http get/post
# https://github.com/beego/beedoc/blob/master/zh-CN/module/httplib.md
snippet wx_httpget "beego httplib get" b
// "github.com/astaxie/beego/httplib"
// "crypto/tls"
r := ${1:struct}{}
url := "${2:url}"
req := httplib.Get(url)
req.SetTLSClientConfig(&tls.Config{InsecureSkipVerify: true})

err := req.ToJSON(&${3:r})
//str, err := req.String()
if err != nil {
}
endsnippet

snippet wx_httppost "beego httplib post" b
// "github.com/astaxie/beego/httplib"
// "crypto/tls"
r := ${1:struct}{}
url := "${2:url}"
req := httplib.Post(url)
req.Param("", "")
req.SetTLSClientConfig(&tls.Config{InsecureSkipVerify: true})

err := req.ToJSON(&${3:r})
//str, err := req.String()
if err != nil {
}
endsnippet

# int int64 string
snippet wx_int "int, int64, string" b
int, err := strconv.Atoi(string)
int64, err := strconv.ParseInt(string, 10, 64)
string := strconv.Itoa(int)
string := strconv.FormatInt(int64,10)
endsnippet

# int int64 string
snippet wx_atomic "add load swap" b
var c int64
atomic.AddInt64(&c, 1)
v := atomic.SwapInt64(&c, 0)
v := atomic.LoadInt64(&c)
endsnippet

# re
snippet wx_re "re" b
reg := regexp.MustCompile(`"(?P<A>.*?)"\s"(?P<B>.*?)"`)
items := reg.FindStringSubmatch(input)
if len(items) != 3 {
	log.Printf("Parse failed: %s\n", input)
}
// input = items[0]
// A = items[1]
// B = items[2]
endsnippet

# sleep
snippet wx_sleep "sleep with ticker" b
<-time.After(100 * time.Millisecond)
endsnippet

### Large snippets

# Mysql conn: MySQL struct, init & release
snippet wx_mysql "mysql" b
// "database/sql"
var dbConn *sql.DB

type MySQL struct {
	Host         string \`json:"host"\`
	Port         string \`json:"port"\`
	DB           string \`json:"database"\`
	User         string \`json:"user"\`
	Pass         string \`json:"password"\`
	MaxOpenConns int    \`json:"max_open_conns"\`
	MaxIdleConns int    \`json:"max_idle_conns"\`
}

func initMySQLConn(conf MySQL) {
	dsn := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?charset=utf8",
		conf.User,
		conf.Pass,
		conf.Host,
		conf.Port,
		conf.DB,
	)
	log.Printf("connect mysql %s", dsn)

	dbConn, err = sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("Failed to connect mysql:%s\n", err.Error())
	}
	if conf.MaxOpenConns == 0 {
		conf.MaxOpenConns = 1000
	}

	if conf.MaxIdleConns == 0 {
		conf.MaxIdleConns = 100
	}

	dbConn.SetMaxOpenConns(conf.MaxOpenConns)
	dbConn.SetMaxIdleConns(conf.MaxIdleConns)

	err = dbConn.Ping()
	if err != nil {
		log.Fatalf("Ping db fail: %s\n", err.Error())
	}
}

func releaseMySQLConn() {
	dbConn.Close()
}
endsnippet

# of style load cfg
snippet wx_cfg "of style load cfg" b
var (
	ConfigFile string
	configLock = new(sync.RWMutex)
	config     *GlobalConfig
)

type GlobalConfig struct {
	// TODO
}

func Config() *GlobalConfig {
	configLock.RLock()
	defer configLock.RUnlock()
	return config
}

// "github.com/toolkits/file"
func ParseConfig(cfg string) {
	if !file.IsExist(cfg) {
		log.Fatalln("config file:", cfg, "is not existent.")
	}
	log.Printf("Loading config %s ...\n", cfg)
	ConfigFile = cfg

	text, err := ioutil.ReadFile(cfg)
	if err != nil {
		log.Fatalln("Read config file:", cfg, "fail:", err)
	}

	var c GlobalConfig
	err = json.Unmarshal(text, &c)
	if err != nil {
		log.Fatalf("Failed to load config: %s", err.Error())
	}

	configLock.Lock()
	defer configLock.Unlock()

	config = &c

	log.Println("read config file:", cfg, "successfully")
}
endsnippet
