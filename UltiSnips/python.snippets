# Snippets for Python

priority 0

snippet wx_http "requests" b
import requests
import urllib3

urllib3.disable_warnings()

url = "${1}"
# https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
r = requests.get(url, verify=False)
j = r.json()
endsnippet

snippet wx_mysql "mysql.connector" b
import mysql.connector

cnx = mysql.connector.connect(user='${1:user}', password='${2:pwd}',
                              host='${3:host}', port='${4:3306}',
                              database='${5:db}')
cursor = cnx.cursor()
# query = "SELECT * FROM xx WHERE x = %s AND y = %s"
# cursor.execute(query, (x, y))
# rows = cursor.fetchall()
# cursor.close()
# cnx.close()
endsnippet

snippet wx_mongo "pymongo" b
from pymongo import MongoClient

conn = MongoClient('${1:IP}:${2:Port}')
database = conn['${3:DB}']
database.authenticate("${4:User}", "${5:Pwd}")
coll = database['${6:Collection}']

## aggregate
#rows = coll_workspace.aggregate([
#    {"$match": {"f_type": "vcdn"}},
#    {"$group": {"_id": "$f_symbol"}}
#])
endsnippet

snippet wx_log "logging basic config" b
import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(filename)s:%(lineno)s - %(name)s - %(message)s"
)
endsnippet

# time
snippet wx_ts "ts -> datetime, time" b
import time
from datetime import datetime

ts = ${1:1489657500}
dt_obj = datetime.fromtimestamp(ts)
t_obj = time.localtime(ts)
endsnippet

snippet wx_datetime "str -> datetime -> time, str" b
from datetime import datetime

# now = datetime.now()
date_str = ${1:"2008-11-10 17:53:59"}
dt_obj = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
date_str = dt_obj.strftime("%Y-%m-%d %H:%M:%S")
t_obj = dt_obj.timetuple()
endsnippet

snippet wx_time "str -> time -> datetime, str, ts" b
import time

# now = time.localtime()
date_str = ${1:"2008-11-10 17:53:59"}
t_obj = time.strptime(date_str, "%Y-%m-%d %H:%M:%S")
date_str = time.strftime("%Y-%m-%d %H:%M:%S", t_obj)
ts = time.mktime(t_obj)
endsnippet

snippet wx_dateutil "rrule" b
# https://dateutil.readthedocs.io
from datetime import datetime
from dateutil.rrule import rrule, MONTHLY
start_date = datetime(2014, 12, 31)
list(rrule(freq=MONTHLY, count=4, dtstart=start_date))
endsnippet
